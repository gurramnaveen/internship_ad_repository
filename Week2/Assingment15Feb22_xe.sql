CREATE USER c##northwind IDENTIFIED BY root;
GRANT ALL PRIVILEGES TO c##northwind;

--******************************************************************************
--PART IV
--------------------------------------------------------------------------------
-- 1. Get a list of latest order IDs for all customers by using the max function on Order_ID column.
SELECT ORDERS.CUSTOMERID, CUSTOMERS.COMPANYNAME, MAX(ORDERS.ORDERID) AS LATEST_ORDER
FROM ORDERS
JOIN CUSTOMERS
ON ORDERS.CUSTOMERID=CUSTOMERS.CUSTOMERID
GROUP BY ORDERS.CUSTOMERID, CUSTOMERS.COMPANYNAME
ORDER BY ORDERS.CUSTOMERID;

-- 2. Find suppliers who sell more than one product to Northwind Trader.
SELECT PRODUCTS.SUPPLIERID, SUPPLIERS.COMPANYNAME, COUNT(PRODUCTS.PRODUCTID) AS SUPPLY
FROM PRODUCTS
JOIN SUPPLIERS
ON PRODUCTS.SUPPLIERID=SUPPLIERS.SUPPLIERID
GROUP BY PRODUCTS.SUPPLIERID, SUPPLIERS.COMPANYNAME
HAVING COUNT(PRODUCTS.PRODUCTID) > 1;

-- 3. Create a function to get latest order date for entered customer_id
CREATE OR REPLACE FUNCTION fn_latest_order_date(ID CUSTOMERS.CUSTOMERID%TYPE)
BEGIN
    SELECT ORDERS.CUSTOMERID, CUSTOMERS.COMPANYNAME, ORDERS.ORDERID, ORDERS.ORDERDATE, MAX(ORDERS.SHIPPEDDATE)
    FROM ORDERS
    JOIN CUSTOMERS
    ON ORDERS.CUSTOMERID=CUSTOMERS.CUSTOMERID
    GROUP BY ORDERS.CUSTOMERID, CUSTOMERS.COMPANYNAME, ORDERS.ORDERID, ORDERS.ORDERDATE
    HAVING ORDERS.CUSTOMERID=ID;
END;

-- 4. Get the top 10 most expensive products
SELECT PRODUCTNAME AS TEN_MOST_EXPENSIVE_PRODUCTS, UNITPRICE
FROM PRODUCTS
ORDER BY UNITPRICE DESC
FETCH NEXT 10 ROWS ONLY;

-- 5. Rank products by the number of units in stock in each product category.
SELECT PRODUCTID,  PRODUCTNAME, UNITSINSTOCK, RANK() OVER (ORDER BY UNITSINSTOCK DESC) STOCK_RANK
FROM PRODUCTS
ORDER BY UNITSINSTOCK DESC;

-- 6. Rank customers by the total sales amount within each order date.
SELECT CUSTOMERID, CUSTOMERNAME, SUM(UNITPRICE*QUANTITY*(1-DISCOUNT)

-- 7. For each order, calculate a subtotal for each Order (identified by OrderID).
SELECT ORDERID, ROUND(SUM(UNITPRICE*QUANTITY*(1-DISCOUNT)), 2) AS SUBTOTAL
FROM ORDERDETAILS
GROUP BY ORDERID
ORDER BY ORDERID;

-- 8. Sales by Year for each order. Hint: Get
--Subtotal as sum(UnitPrice * Quantity * (1 - Discount)) for every order_id then join with orders
SELECT ORDERS.SHIPPEDDATE, ORDERS.ORDERID, SUM(ORDERDETAILS.UNITPRICE*ORDERDETAILS.QUANTITY*(1-ORDERDETAILS.DISCOUNT)) AS SUBTOTAL, EXTRACT(YEAR FROM ORDERS.SHIPPEDDATE) AS SUBTOTAL
FROM ORDERS
JOIN ORDERDETAILS
ON ORDERS.ORDERID = ORDERDETAILS.ORDERID
GROUP BY ORDERS.SHIPPEDDATE, ORDERS.ORDERID
ORDER BY ORDERS.SHIPPEDDATE;

-- 9. Get Employee sales by country names
SELECT EMPLOYEES.COUNTRY, EMPLOYEES.LASTNAME, EMPLOYEES.FIRSTNAME, ORDERS.SHIPPEDDATE, ORDERS.ORDERID, SUM(ORDERDETAILS.UNITPRICE*ORDERDETAILS.QUANTITY*(1-ORDERDETAILS.DISCOUNT)) AS SALE_AMOUNT
FROM ORDERS
JOIN EMPLOYEES
ON EMPLOYEES.EMPLOYEEID=ORDERS.EMPLOYEEID
JOIN ORDERDETAILS
ON ORDERDETAILS.ORDERID=ORDERS.ORDERID
GROUP BY EMPLOYEES.COUNTRY, EMPLOYEES.LASTNAME, EMPLOYEES.FIRSTNAME, ORDERS.SHIPPEDDATE, ORDERS.ORDERID
ORDER BY EMPLOYEES.COUNTRY, ORDERS.ORDERID;

-- 10. Alphabetical list of products
SELECT PRODUCTID, PRODUCTNAME, SUPPLIERID, CATEGORYID, QUANTITYPERUNIT, UNITPRICE
FROM PRODUCTS
ORDER BY PRODUCTNAME;

-- 11. Display the current Productlist
SELECT PRODUCTID, PRODUCTNAME
FROM PRODUCTS
WHERE DISCONTINUED=0
ORDER BY PRODUCTNAME;

-- 12. Calculate sales price for each order after discount is applied.
SELECT ORDERDETAILS.ORDERID, ORDERDETAILS.PRODUCTID, PRODUCTS.PRODUCTNAME, ORDERDETAILS.UNITPRICE, ORDERDETAILS.QUANTITY, ORDERDETAILS.DISCOUNT, ORDERDETAILS.UNITPRICE*ORDERDETAILS.QUANTITY*(1-ORDERDETAILS.DISCOUNT) AS EXTENDEDPRICE
FROM PRODUCTS
JOIN ORDERDETAILS
ON PRODUCTS.PRODUCTID=ORDERDETAILS.PRODUCTID
ORDER BY ORDERDETAILS.ORDERID;

-- 13. Sales by Category: For each category, we get the list of products sold and the total sales amount.
SELECT CATEGORIES.CATEGORYID, CATEGORIES.CATEGORYNAME, PRODUCTS.PRODUCTNAME, SUM(ORDERDETAILS.UNITPRICE*ORDERDETAILS.QUANTITY*(1-ORDERDETAILS.DISCOUNT)) AS TOTALSALES
FROM PRODUCTS
JOIN CATEGORIES
ON CATEGORIES.CATEGORYID=PRODUCTS.CATEGORYID
JOIN ORDERDETAILS
ON ORDERDETAILS.PRODUCTID=PRODUCTS.PRODUCTID
GROUP BY CATEGORIES.CATEGORYID, CATEGORIES.CATEGORYNAME, PRODUCTS.PRODUCTNAME
ORDER BY CATEGORIES.CATEGORYID;

--14. Create below views.
-- 1) Displays products(productname,unitprice) who’s price is greater than avg(price)
CREATE VIEW vwProducts_Above_Average_Price(ProductName, UnitPrice)
AS
SELECT PRODUCTNAME, UNITPRICE
FROM PRODUCTS
WHERE UNITPRICE > (
    SELECT AVG(UNITPRICE)
    FROM PRODUCTS)
ORDER BY UNITPRICE;

SELECT *
FROM vwProducts_Above_Average_Price;

-- 2) Display product(productname), customers(companyname), orders(orderyear)
CREATE VIEW vwQuarterly_Orders_by_Product(PRODUCTNAME,  COMPANYNAME, ORDERYEAR)
AS
SELECT PRODUCTS.PRODUCTNAME, CUSTOMERS.COMPANYNAME, EXTRACT(YEAR FROM ORDERS.ORDERDATE)
FROM PRODUCTS
JOIN ORDERDETAILS
ON ORDERDETAILS.PRODUCTID=PRODUCTS.PRODUCTID
JOIN ORDERS
ON ORDERS.ORDERID=ORDERDETAILS.ORDERID
JOIN CUSTOMERS
ON CUSTOMERS.CUSTOMERID=ORDERS.CUSTOMERID;

SELECT *
FROM vwQuarterly_Orders_by_Product;

-- 3) Display Supplier Continent wise sum of unitinstock. 
--      'Europe'= ('UK','Spain','Sweden','Germany','Norway',                  'Denmark','Netherlands','Finland','Italy','France')  
--      'America'= 'USA','Canada','Brazil' and 'Asia-Pacific'
SELECT DISTINCT COUNTRY
FROM SUPPLIERS;
CREATE VIEW vwUnitsInStock
AS
SELECT DECODE(SUPPLIERS.COUNTRY,
    'UK', 'EUROPE',
    'SPAIN', 'EUROPE',
    'SWEDEN', 'EUROPE',
    'GERMANY', 'EUROPE',
    'NORWAY', 'EUROPE',
    'USA', 'AMERICA',
    'CANADA', 'AMERICA',
    'BRAZIL', 'AMERICA',
    'JAPAN', 'ASIA-PACIFIC',
    'AUSTRALIA', 'ASIA-PACIFIC',
    'ITALY', 'ASIA-PACIFIC',
    'FRANCE', 'ASIA-PACIFIC',
    'SINGAPORE', 'ASIA-PACIFIC',
    'DENMARK', 'ASIA-PACIFIC',
    'NETHERLANDS', 'ASIA-PACIFIC',
    'FINLAND', 'ASIA-PACIFIC',
    'NOT MENTIONED') AS CONTINENT,
    SUM(PRODUCTS.UNITSINSTOCK)
FROM SUPPLIERS
JOIN PRODUCTS
ON SUPPLIERS.SUPPLIERID=PRODUCTS.SUPPLIERID
GROUP BY SUPPLIERS.COUNTRY;

-- 4) Display top 10 expensive products.

CREATE VIEW vw10Most_Expensive_Products
AS
SELECT PRODUCTNAME, UNITPRICE
FROM PRODUCTS
ORDER BY UNITPRICE DESC
FETCH NEXT 10 ROWS ONLY;

SELECT *
FROM vw10Most_Expensive_Products;

-- 5) Display customer supplier by city
CREATE VIEW
AS
SELECT CITY, COMPANYNAME, CONTACTNAME
FROM SUPPLIERS;